\import Logic
\import Paths

-- A constant function always return 0
\func f => 0
-- or we can make more precisely, it's a `Nat`
\func f' : Nat => 0

-- parameter
\func id-nat (n : Nat) => n
-- again, can specific return type
\func id-nat' (n : Nat) : Nat => n

\func fst (m _ : Nat) => m
\func snd (_ n : Nat) => n
-- lambda is same thing
\func fst' => \lam (m _ : Nat) => m

-- infix operator, precedence can be 1-9
\func \infixl 6 $$ (x y : Nat) => x
\func test => 3 $$ 7

-- unit is the only member of Unit
\data Unit | unit
-- Boolean
\data Bool | false | true
-- not function
\func not (b : Bool) : Bool
  | true => false
  | false => true
\func or (a b : Bool) : Bool \elim a, b
  | true, _ => true
  | _, true => true
  | _, _ => false
\func if {A : \Type} (cond : Bool) (then else : A) : A \elim cond
  | true => then
  | false => else

\data Nat' | zero' | suc' Nat

\func id {A : \Type} (a : A) => a

\func left=right : left = right => coe (\lam i => left = i) idp right

\func false/=true (p : false = true) : Empty => transport T p unit
  \where {
    \func T (b : Bool) : \Type
      | true => Empty
      | false => Unit
  }

\data CoerceBool | coerce-true | coerce-false
  \where
    \use \coerce toNat (b : CoerceBool) : Nat
      | coerce-true => 1
      | coerce-false => 0
    \use \coerce fromNat (n : Nat) : CoerceBool
      | 0 => coerce-false
      | 1 => coerce-true
      | suc (suc n) => fromNat n

\func Leibinz {A : \Type} {a a' : A}
  -- forall P : A -> \Type, exist P a -> P a' and P a' -> P a
  (f : \Pi (P : A -> \Type) -> \Sigma (P a -> P a') (P a' -> P a))
  -- implements a = a'
  : a = a'
  => (f (\lam x => a = x)).1 idp

\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  coe (\lam i => B (p @ i)) b right

\func inv {A : \Type} {a a' : A} (p : a = a') : a' = a =>
  transport (\lam x => x = a) p idp
\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' =>
  transport (\lam x => a = x) q p
\func congruence {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' =>
  transport (\lam x => f a = f x) p idp

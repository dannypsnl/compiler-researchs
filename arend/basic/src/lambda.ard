\import Logic
\import Set

\func ID => Nat
\data Term
  | variable ID
  | abstraction ID Term
  | application Term Term

\func apply (f : Term) (a : Term) : Term
  | abstraction x M, a => subst M x a
  | f, a => application f a

\instance NatDecSet : DecSet Nat
  | decideEq x y => \case x, y \with {
    | 0, 0 => {?}
    | 0, suc y => {?}
    | suc x, y => {?}
  }

\func subst (M : Term) (x : ID) (a : Term) : Term \elim M
  | variable x1 => \case decideEq x1 x \with {
    | yes x1=x => a
    | no x1/=x => variable x1
  }
  | abstraction x1 m => \case decideEq x1 x \with {
    | yes x1=x => abstraction x1 m
    | no x1/=x => abstraction x1 (subst m x a)
  }
  | application t1 t2 => application (subst t1 x a) (subst t2 x a)